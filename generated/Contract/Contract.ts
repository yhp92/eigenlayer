// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get depositor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get strategy(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get shares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newPausedStatus(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PauserRegistrySet extends ethereum.Event {
  get params(): PauserRegistrySet__Params {
    return new PauserRegistrySet__Params(this);
  }
}

export class PauserRegistrySet__Params {
  _event: PauserRegistrySet;

  constructor(event: PauserRegistrySet) {
    this._event = event;
  }

  get pauserRegistry(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newPauserRegistry(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ShareWithdrawalQueued extends ethereum.Event {
  get params(): ShareWithdrawalQueued__Params {
    return new ShareWithdrawalQueued__Params(this);
  }
}

export class ShareWithdrawalQueued__Params {
  _event: ShareWithdrawalQueued;

  constructor(event: ShareWithdrawalQueued) {
    this._event = event;
  }

  get depositor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nonce(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get strategy(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get shares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class StrategyAddedToDepositWhitelist extends ethereum.Event {
  get params(): StrategyAddedToDepositWhitelist__Params {
    return new StrategyAddedToDepositWhitelist__Params(this);
  }
}

export class StrategyAddedToDepositWhitelist__Params {
  _event: StrategyAddedToDepositWhitelist;

  constructor(event: StrategyAddedToDepositWhitelist) {
    this._event = event;
  }

  get strategy(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class StrategyRemovedFromDepositWhitelist extends ethereum.Event {
  get params(): StrategyRemovedFromDepositWhitelist__Params {
    return new StrategyRemovedFromDepositWhitelist__Params(this);
  }
}

export class StrategyRemovedFromDepositWhitelist__Params {
  _event: StrategyRemovedFromDepositWhitelist;

  constructor(event: StrategyRemovedFromDepositWhitelist) {
    this._event = event;
  }

  get strategy(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class StrategyWhitelisterChanged extends ethereum.Event {
  get params(): StrategyWhitelisterChanged__Params {
    return new StrategyWhitelisterChanged__Params(this);
  }
}

export class StrategyWhitelisterChanged__Params {
  _event: StrategyWhitelisterChanged;

  constructor(event: StrategyWhitelisterChanged) {
    this._event = event;
  }

  get previousAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newPausedStatus(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WithdrawalCompleted extends ethereum.Event {
  get params(): WithdrawalCompleted__Params {
    return new WithdrawalCompleted__Params(this);
  }
}

export class WithdrawalCompleted__Params {
  _event: WithdrawalCompleted;

  constructor(event: WithdrawalCompleted) {
    this._event = event;
  }

  get depositor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nonce(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get withdrawer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get withdrawalRoot(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class WithdrawalDelayBlocksSet extends ethereum.Event {
  get params(): WithdrawalDelayBlocksSet__Params {
    return new WithdrawalDelayBlocksSet__Params(this);
  }
}

export class WithdrawalDelayBlocksSet__Params {
  _event: WithdrawalDelayBlocksSet;

  constructor(event: WithdrawalDelayBlocksSet) {
    this._event = event;
  }

  get previousValue(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newValue(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WithdrawalQueued extends ethereum.Event {
  get params(): WithdrawalQueued__Params {
    return new WithdrawalQueued__Params(this);
  }
}

export class WithdrawalQueued__Params {
  _event: WithdrawalQueued;

  constructor(event: WithdrawalQueued) {
    this._event = event;
  }

  get depositor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nonce(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get withdrawer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get delegatedAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get withdrawalRoot(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class Contract__calculateWithdrawalRootInputQueuedWithdrawalStruct extends ethereum.Tuple {
  get strategies(): Array<Address> {
    return this[0].toAddressArray();
  }

  get shares(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get depositor(): Address {
    return this[2].toAddress();
  }

  get withdrawerAndNonce(): Contract__calculateWithdrawalRootInputQueuedWithdrawalWithdrawerAndNonceStruct {
    return changetype<
      Contract__calculateWithdrawalRootInputQueuedWithdrawalWithdrawerAndNonceStruct
    >(this[3].toTuple());
  }

  get withdrawalStartBlock(): BigInt {
    return this[4].toBigInt();
  }

  get delegatedAddress(): Address {
    return this[5].toAddress();
  }
}

export class Contract__calculateWithdrawalRootInputQueuedWithdrawalWithdrawerAndNonceStruct extends ethereum.Tuple {
  get withdrawer(): Address {
    return this[0].toAddress();
  }

  get nonce(): BigInt {
    return this[1].toBigInt();
  }
}

export class Contract__getDepositsResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getValue0(): Array<Address> {
    return this.value0;
  }

  getValue1(): Array<BigInt> {
    return this.value1;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  DEPOSIT_TYPEHASH(): Bytes {
    let result = super.call(
      "DEPOSIT_TYPEHASH",
      "DEPOSIT_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEPOSIT_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEPOSIT_TYPEHASH",
      "DEPOSIT_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DOMAIN_TYPEHASH(): Bytes {
    let result = super.call(
      "DOMAIN_TYPEHASH",
      "DOMAIN_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_TYPEHASH",
      "DOMAIN_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MAX_WITHDRAWAL_DELAY_BLOCKS(): BigInt {
    let result = super.call(
      "MAX_WITHDRAWAL_DELAY_BLOCKS",
      "MAX_WITHDRAWAL_DELAY_BLOCKS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_WITHDRAWAL_DELAY_BLOCKS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_WITHDRAWAL_DELAY_BLOCKS",
      "MAX_WITHDRAWAL_DELAY_BLOCKS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  beaconChainETHSharesToDecrementOnWithdrawal(param0: Address): BigInt {
    let result = super.call(
      "beaconChainETHSharesToDecrementOnWithdrawal",
      "beaconChainETHSharesToDecrementOnWithdrawal(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_beaconChainETHSharesToDecrementOnWithdrawal(
    param0: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "beaconChainETHSharesToDecrementOnWithdrawal",
      "beaconChainETHSharesToDecrementOnWithdrawal(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  beaconChainETHStrategy(): Address {
    let result = super.call(
      "beaconChainETHStrategy",
      "beaconChainETHStrategy():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_beaconChainETHStrategy(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "beaconChainETHStrategy",
      "beaconChainETHStrategy():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  calculateWithdrawalRoot(
    queuedWithdrawal: Contract__calculateWithdrawalRootInputQueuedWithdrawalStruct
  ): Bytes {
    let result = super.call(
      "calculateWithdrawalRoot",
      "calculateWithdrawalRoot((address[],uint256[],address,(address,uint96),uint32,address)):(bytes32)",
      [ethereum.Value.fromTuple(queuedWithdrawal)]
    );

    return result[0].toBytes();
  }

  try_calculateWithdrawalRoot(
    queuedWithdrawal: Contract__calculateWithdrawalRootInputQueuedWithdrawalStruct
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "calculateWithdrawalRoot",
      "calculateWithdrawalRoot((address[],uint256[],address,(address,uint96),uint32,address)):(bytes32)",
      [ethereum.Value.fromTuple(queuedWithdrawal)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  delegation(): Address {
    let result = super.call("delegation", "delegation():(address)", []);

    return result[0].toAddress();
  }

  try_delegation(): ethereum.CallResult<Address> {
    let result = super.tryCall("delegation", "delegation():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  depositIntoStrategy(
    strategy: Address,
    token: Address,
    amount: BigInt
  ): BigInt {
    let result = super.call(
      "depositIntoStrategy",
      "depositIntoStrategy(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(strategy),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_depositIntoStrategy(
    strategy: Address,
    token: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositIntoStrategy",
      "depositIntoStrategy(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(strategy),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositIntoStrategyWithSignature(
    strategy: Address,
    token: Address,
    amount: BigInt,
    staker: Address,
    expiry: BigInt,
    signature: Bytes
  ): BigInt {
    let result = super.call(
      "depositIntoStrategyWithSignature",
      "depositIntoStrategyWithSignature(address,address,uint256,address,uint256,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(strategy),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(staker),
        ethereum.Value.fromUnsignedBigInt(expiry),
        ethereum.Value.fromBytes(signature)
      ]
    );

    return result[0].toBigInt();
  }

  try_depositIntoStrategyWithSignature(
    strategy: Address,
    token: Address,
    amount: BigInt,
    staker: Address,
    expiry: BigInt,
    signature: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositIntoStrategyWithSignature",
      "depositIntoStrategyWithSignature(address,address,uint256,address,uint256,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(strategy),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(staker),
        ethereum.Value.fromUnsignedBigInt(expiry),
        ethereum.Value.fromBytes(signature)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  eigenPodManager(): Address {
    let result = super.call(
      "eigenPodManager",
      "eigenPodManager():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_eigenPodManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "eigenPodManager",
      "eigenPodManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDeposits(depositor: Address): Contract__getDepositsResult {
    let result = super.call(
      "getDeposits",
      "getDeposits(address):(address[],uint256[])",
      [ethereum.Value.fromAddress(depositor)]
    );

    return new Contract__getDepositsResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_getDeposits(
    depositor: Address
  ): ethereum.CallResult<Contract__getDepositsResult> {
    let result = super.tryCall(
      "getDeposits",
      "getDeposits(address):(address[],uint256[])",
      [ethereum.Value.fromAddress(depositor)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getDepositsResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  nonces(param0: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numWithdrawalsQueued(param0: Address): BigInt {
    let result = super.call(
      "numWithdrawalsQueued",
      "numWithdrawalsQueued(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_numWithdrawalsQueued(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numWithdrawalsQueued",
      "numWithdrawalsQueued(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(index: i32): boolean {
    let result = super.call("paused", "paused(uint8):(bool)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(index))
    ]);

    return result[0].toBoolean();
  }

  try_paused(index: i32): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused(uint8):(bool)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(index))
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  paused1(): BigInt {
    let result = super.call("paused", "paused():(uint256)", []);

    return result[0].toBigInt();
  }

  try_paused1(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("paused", "paused():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pauserRegistry(): Address {
    let result = super.call("pauserRegistry", "pauserRegistry():(address)", []);

    return result[0].toAddress();
  }

  try_pauserRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "pauserRegistry",
      "pauserRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  queueWithdrawal(
    strategyIndexes: Array<BigInt>,
    strategies: Array<Address>,
    shares: Array<BigInt>,
    withdrawer: Address,
    undelegateIfPossible: boolean
  ): Bytes {
    let result = super.call(
      "queueWithdrawal",
      "queueWithdrawal(uint256[],address[],uint256[],address,bool):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigIntArray(strategyIndexes),
        ethereum.Value.fromAddressArray(strategies),
        ethereum.Value.fromUnsignedBigIntArray(shares),
        ethereum.Value.fromAddress(withdrawer),
        ethereum.Value.fromBoolean(undelegateIfPossible)
      ]
    );

    return result[0].toBytes();
  }

  try_queueWithdrawal(
    strategyIndexes: Array<BigInt>,
    strategies: Array<Address>,
    shares: Array<BigInt>,
    withdrawer: Address,
    undelegateIfPossible: boolean
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "queueWithdrawal",
      "queueWithdrawal(uint256[],address[],uint256[],address,bool):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigIntArray(strategyIndexes),
        ethereum.Value.fromAddressArray(strategies),
        ethereum.Value.fromUnsignedBigIntArray(shares),
        ethereum.Value.fromAddress(withdrawer),
        ethereum.Value.fromBoolean(undelegateIfPossible)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  slasher(): Address {
    let result = super.call("slasher", "slasher():(address)", []);

    return result[0].toAddress();
  }

  try_slasher(): ethereum.CallResult<Address> {
    let result = super.tryCall("slasher", "slasher():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakerStrategyList(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "stakerStrategyList",
      "stakerStrategyList(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_stakerStrategyList(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stakerStrategyList",
      "stakerStrategyList(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakerStrategyListLength(staker: Address): BigInt {
    let result = super.call(
      "stakerStrategyListLength",
      "stakerStrategyListLength(address):(uint256)",
      [ethereum.Value.fromAddress(staker)]
    );

    return result[0].toBigInt();
  }

  try_stakerStrategyListLength(staker: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakerStrategyListLength",
      "stakerStrategyListLength(address):(uint256)",
      [ethereum.Value.fromAddress(staker)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakerStrategyShares(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "stakerStrategyShares",
      "stakerStrategyShares(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_stakerStrategyShares(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakerStrategyShares",
      "stakerStrategyShares(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  strategyIsWhitelistedForDeposit(param0: Address): boolean {
    let result = super.call(
      "strategyIsWhitelistedForDeposit",
      "strategyIsWhitelistedForDeposit(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_strategyIsWhitelistedForDeposit(
    param0: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "strategyIsWhitelistedForDeposit",
      "strategyIsWhitelistedForDeposit(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  strategyWhitelister(): Address {
    let result = super.call(
      "strategyWhitelister",
      "strategyWhitelister():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_strategyWhitelister(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "strategyWhitelister",
      "strategyWhitelister():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  withdrawalDelayBlocks(): BigInt {
    let result = super.call(
      "withdrawalDelayBlocks",
      "withdrawalDelayBlocks():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_withdrawalDelayBlocks(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawalDelayBlocks",
      "withdrawalDelayBlocks():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawalRootPending(param0: Bytes): boolean {
    let result = super.call(
      "withdrawalRootPending",
      "withdrawalRootPending(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBoolean();
  }

  try_withdrawalRootPending(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "withdrawalRootPending",
      "withdrawalRootPending(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _delegation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _eigenPodManager(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _slasher(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddStrategiesToDepositWhitelistCall extends ethereum.Call {
  get inputs(): AddStrategiesToDepositWhitelistCall__Inputs {
    return new AddStrategiesToDepositWhitelistCall__Inputs(this);
  }

  get outputs(): AddStrategiesToDepositWhitelistCall__Outputs {
    return new AddStrategiesToDepositWhitelistCall__Outputs(this);
  }
}

export class AddStrategiesToDepositWhitelistCall__Inputs {
  _call: AddStrategiesToDepositWhitelistCall;

  constructor(call: AddStrategiesToDepositWhitelistCall) {
    this._call = call;
  }

  get strategiesToWhitelist(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class AddStrategiesToDepositWhitelistCall__Outputs {
  _call: AddStrategiesToDepositWhitelistCall;

  constructor(call: AddStrategiesToDepositWhitelistCall) {
    this._call = call;
  }
}

export class CompleteQueuedWithdrawalCall extends ethereum.Call {
  get inputs(): CompleteQueuedWithdrawalCall__Inputs {
    return new CompleteQueuedWithdrawalCall__Inputs(this);
  }

  get outputs(): CompleteQueuedWithdrawalCall__Outputs {
    return new CompleteQueuedWithdrawalCall__Outputs(this);
  }
}

export class CompleteQueuedWithdrawalCall__Inputs {
  _call: CompleteQueuedWithdrawalCall;

  constructor(call: CompleteQueuedWithdrawalCall) {
    this._call = call;
  }

  get queuedWithdrawal(): CompleteQueuedWithdrawalCallQueuedWithdrawalStruct {
    return changetype<CompleteQueuedWithdrawalCallQueuedWithdrawalStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get middlewareTimesIndex(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get receiveAsTokens(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class CompleteQueuedWithdrawalCall__Outputs {
  _call: CompleteQueuedWithdrawalCall;

  constructor(call: CompleteQueuedWithdrawalCall) {
    this._call = call;
  }
}

export class CompleteQueuedWithdrawalCallQueuedWithdrawalStruct extends ethereum.Tuple {
  get strategies(): Array<Address> {
    return this[0].toAddressArray();
  }

  get shares(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get depositor(): Address {
    return this[2].toAddress();
  }

  get withdrawerAndNonce(): CompleteQueuedWithdrawalCallQueuedWithdrawalWithdrawerAndNonceStruct {
    return changetype<
      CompleteQueuedWithdrawalCallQueuedWithdrawalWithdrawerAndNonceStruct
    >(this[3].toTuple());
  }

  get withdrawalStartBlock(): BigInt {
    return this[4].toBigInt();
  }

  get delegatedAddress(): Address {
    return this[5].toAddress();
  }
}

export class CompleteQueuedWithdrawalCallQueuedWithdrawalWithdrawerAndNonceStruct extends ethereum.Tuple {
  get withdrawer(): Address {
    return this[0].toAddress();
  }

  get nonce(): BigInt {
    return this[1].toBigInt();
  }
}

export class CompleteQueuedWithdrawalsCall extends ethereum.Call {
  get inputs(): CompleteQueuedWithdrawalsCall__Inputs {
    return new CompleteQueuedWithdrawalsCall__Inputs(this);
  }

  get outputs(): CompleteQueuedWithdrawalsCall__Outputs {
    return new CompleteQueuedWithdrawalsCall__Outputs(this);
  }
}

export class CompleteQueuedWithdrawalsCall__Inputs {
  _call: CompleteQueuedWithdrawalsCall;

  constructor(call: CompleteQueuedWithdrawalsCall) {
    this._call = call;
  }

  get queuedWithdrawals(): Array<
    CompleteQueuedWithdrawalsCallQueuedWithdrawalsStruct
  > {
    return this._call.inputValues[0].value.toTupleArray<
      CompleteQueuedWithdrawalsCallQueuedWithdrawalsStruct
    >();
  }

  get tokens(): Array<Array<Address>> {
    return this._call.inputValues[1].value.toAddressMatrix();
  }

  get middlewareTimesIndexes(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get receiveAsTokens(): Array<boolean> {
    return this._call.inputValues[3].value.toBooleanArray();
  }
}

export class CompleteQueuedWithdrawalsCall__Outputs {
  _call: CompleteQueuedWithdrawalsCall;

  constructor(call: CompleteQueuedWithdrawalsCall) {
    this._call = call;
  }
}

export class CompleteQueuedWithdrawalsCallQueuedWithdrawalsStruct extends ethereum.Tuple {
  get strategies(): Array<Address> {
    return this[0].toAddressArray();
  }

  get shares(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get depositor(): Address {
    return this[2].toAddress();
  }

  get withdrawerAndNonce(): CompleteQueuedWithdrawalsCallQueuedWithdrawalsWithdrawerAndNonceStruct {
    return changetype<
      CompleteQueuedWithdrawalsCallQueuedWithdrawalsWithdrawerAndNonceStruct
    >(this[3].toTuple());
  }

  get withdrawalStartBlock(): BigInt {
    return this[4].toBigInt();
  }

  get delegatedAddress(): Address {
    return this[5].toAddress();
  }
}

export class CompleteQueuedWithdrawalsCallQueuedWithdrawalsWithdrawerAndNonceStruct extends ethereum.Tuple {
  get withdrawer(): Address {
    return this[0].toAddress();
  }

  get nonce(): BigInt {
    return this[1].toBigInt();
  }
}

export class DepositBeaconChainETHCall extends ethereum.Call {
  get inputs(): DepositBeaconChainETHCall__Inputs {
    return new DepositBeaconChainETHCall__Inputs(this);
  }

  get outputs(): DepositBeaconChainETHCall__Outputs {
    return new DepositBeaconChainETHCall__Outputs(this);
  }
}

export class DepositBeaconChainETHCall__Inputs {
  _call: DepositBeaconChainETHCall;

  constructor(call: DepositBeaconChainETHCall) {
    this._call = call;
  }

  get staker(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositBeaconChainETHCall__Outputs {
  _call: DepositBeaconChainETHCall;

  constructor(call: DepositBeaconChainETHCall) {
    this._call = call;
  }
}

export class DepositIntoStrategyCall extends ethereum.Call {
  get inputs(): DepositIntoStrategyCall__Inputs {
    return new DepositIntoStrategyCall__Inputs(this);
  }

  get outputs(): DepositIntoStrategyCall__Outputs {
    return new DepositIntoStrategyCall__Outputs(this);
  }
}

export class DepositIntoStrategyCall__Inputs {
  _call: DepositIntoStrategyCall;

  constructor(call: DepositIntoStrategyCall) {
    this._call = call;
  }

  get strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositIntoStrategyCall__Outputs {
  _call: DepositIntoStrategyCall;

  constructor(call: DepositIntoStrategyCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositIntoStrategyWithSignatureCall extends ethereum.Call {
  get inputs(): DepositIntoStrategyWithSignatureCall__Inputs {
    return new DepositIntoStrategyWithSignatureCall__Inputs(this);
  }

  get outputs(): DepositIntoStrategyWithSignatureCall__Outputs {
    return new DepositIntoStrategyWithSignatureCall__Outputs(this);
  }
}

export class DepositIntoStrategyWithSignatureCall__Inputs {
  _call: DepositIntoStrategyWithSignatureCall;

  constructor(call: DepositIntoStrategyWithSignatureCall) {
    this._call = call;
  }

  get strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get staker(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get expiry(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get signature(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class DepositIntoStrategyWithSignatureCall__Outputs {
  _call: DepositIntoStrategyWithSignatureCall;

  constructor(call: DepositIntoStrategyWithSignatureCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get initialOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get initialStrategyWhitelister(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _pauserRegistry(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get initialPausedStatus(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _withdrawalDelayBlocks(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }

  get newPausedStatus(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseAllCall extends ethereum.Call {
  get inputs(): PauseAllCall__Inputs {
    return new PauseAllCall__Inputs(this);
  }

  get outputs(): PauseAllCall__Outputs {
    return new PauseAllCall__Outputs(this);
  }
}

export class PauseAllCall__Inputs {
  _call: PauseAllCall;

  constructor(call: PauseAllCall) {
    this._call = call;
  }
}

export class PauseAllCall__Outputs {
  _call: PauseAllCall;

  constructor(call: PauseAllCall) {
    this._call = call;
  }
}

export class QueueWithdrawalCall extends ethereum.Call {
  get inputs(): QueueWithdrawalCall__Inputs {
    return new QueueWithdrawalCall__Inputs(this);
  }

  get outputs(): QueueWithdrawalCall__Outputs {
    return new QueueWithdrawalCall__Outputs(this);
  }
}

export class QueueWithdrawalCall__Inputs {
  _call: QueueWithdrawalCall;

  constructor(call: QueueWithdrawalCall) {
    this._call = call;
  }

  get strategyIndexes(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get strategies(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get shares(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get withdrawer(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get undelegateIfPossible(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class QueueWithdrawalCall__Outputs {
  _call: QueueWithdrawalCall;

  constructor(call: QueueWithdrawalCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RecordOvercommittedBeaconChainETHCall extends ethereum.Call {
  get inputs(): RecordOvercommittedBeaconChainETHCall__Inputs {
    return new RecordOvercommittedBeaconChainETHCall__Inputs(this);
  }

  get outputs(): RecordOvercommittedBeaconChainETHCall__Outputs {
    return new RecordOvercommittedBeaconChainETHCall__Outputs(this);
  }
}

export class RecordOvercommittedBeaconChainETHCall__Inputs {
  _call: RecordOvercommittedBeaconChainETHCall;

  constructor(call: RecordOvercommittedBeaconChainETHCall) {
    this._call = call;
  }

  get overcommittedPodOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get beaconChainETHStrategyIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RecordOvercommittedBeaconChainETHCall__Outputs {
  _call: RecordOvercommittedBeaconChainETHCall;

  constructor(call: RecordOvercommittedBeaconChainETHCall) {
    this._call = call;
  }
}

export class RemoveStrategiesFromDepositWhitelistCall extends ethereum.Call {
  get inputs(): RemoveStrategiesFromDepositWhitelistCall__Inputs {
    return new RemoveStrategiesFromDepositWhitelistCall__Inputs(this);
  }

  get outputs(): RemoveStrategiesFromDepositWhitelistCall__Outputs {
    return new RemoveStrategiesFromDepositWhitelistCall__Outputs(this);
  }
}

export class RemoveStrategiesFromDepositWhitelistCall__Inputs {
  _call: RemoveStrategiesFromDepositWhitelistCall;

  constructor(call: RemoveStrategiesFromDepositWhitelistCall) {
    this._call = call;
  }

  get strategiesToRemoveFromWhitelist(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class RemoveStrategiesFromDepositWhitelistCall__Outputs {
  _call: RemoveStrategiesFromDepositWhitelistCall;

  constructor(call: RemoveStrategiesFromDepositWhitelistCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetPauserRegistryCall extends ethereum.Call {
  get inputs(): SetPauserRegistryCall__Inputs {
    return new SetPauserRegistryCall__Inputs(this);
  }

  get outputs(): SetPauserRegistryCall__Outputs {
    return new SetPauserRegistryCall__Outputs(this);
  }
}

export class SetPauserRegistryCall__Inputs {
  _call: SetPauserRegistryCall;

  constructor(call: SetPauserRegistryCall) {
    this._call = call;
  }

  get newPauserRegistry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPauserRegistryCall__Outputs {
  _call: SetPauserRegistryCall;

  constructor(call: SetPauserRegistryCall) {
    this._call = call;
  }
}

export class SetStrategyWhitelisterCall extends ethereum.Call {
  get inputs(): SetStrategyWhitelisterCall__Inputs {
    return new SetStrategyWhitelisterCall__Inputs(this);
  }

  get outputs(): SetStrategyWhitelisterCall__Outputs {
    return new SetStrategyWhitelisterCall__Outputs(this);
  }
}

export class SetStrategyWhitelisterCall__Inputs {
  _call: SetStrategyWhitelisterCall;

  constructor(call: SetStrategyWhitelisterCall) {
    this._call = call;
  }

  get newStrategyWhitelister(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetStrategyWhitelisterCall__Outputs {
  _call: SetStrategyWhitelisterCall;

  constructor(call: SetStrategyWhitelisterCall) {
    this._call = call;
  }
}

export class SetWithdrawalDelayBlocksCall extends ethereum.Call {
  get inputs(): SetWithdrawalDelayBlocksCall__Inputs {
    return new SetWithdrawalDelayBlocksCall__Inputs(this);
  }

  get outputs(): SetWithdrawalDelayBlocksCall__Outputs {
    return new SetWithdrawalDelayBlocksCall__Outputs(this);
  }
}

export class SetWithdrawalDelayBlocksCall__Inputs {
  _call: SetWithdrawalDelayBlocksCall;

  constructor(call: SetWithdrawalDelayBlocksCall) {
    this._call = call;
  }

  get _withdrawalDelayBlocks(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetWithdrawalDelayBlocksCall__Outputs {
  _call: SetWithdrawalDelayBlocksCall;

  constructor(call: SetWithdrawalDelayBlocksCall) {
    this._call = call;
  }
}

export class SlashQueuedWithdrawalCall extends ethereum.Call {
  get inputs(): SlashQueuedWithdrawalCall__Inputs {
    return new SlashQueuedWithdrawalCall__Inputs(this);
  }

  get outputs(): SlashQueuedWithdrawalCall__Outputs {
    return new SlashQueuedWithdrawalCall__Outputs(this);
  }
}

export class SlashQueuedWithdrawalCall__Inputs {
  _call: SlashQueuedWithdrawalCall;

  constructor(call: SlashQueuedWithdrawalCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get queuedWithdrawal(): SlashQueuedWithdrawalCallQueuedWithdrawalStruct {
    return changetype<SlashQueuedWithdrawalCallQueuedWithdrawalStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get indicesToSkip(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class SlashQueuedWithdrawalCall__Outputs {
  _call: SlashQueuedWithdrawalCall;

  constructor(call: SlashQueuedWithdrawalCall) {
    this._call = call;
  }
}

export class SlashQueuedWithdrawalCallQueuedWithdrawalStruct extends ethereum.Tuple {
  get strategies(): Array<Address> {
    return this[0].toAddressArray();
  }

  get shares(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get depositor(): Address {
    return this[2].toAddress();
  }

  get withdrawerAndNonce(): SlashQueuedWithdrawalCallQueuedWithdrawalWithdrawerAndNonceStruct {
    return changetype<
      SlashQueuedWithdrawalCallQueuedWithdrawalWithdrawerAndNonceStruct
    >(this[3].toTuple());
  }

  get withdrawalStartBlock(): BigInt {
    return this[4].toBigInt();
  }

  get delegatedAddress(): Address {
    return this[5].toAddress();
  }
}

export class SlashQueuedWithdrawalCallQueuedWithdrawalWithdrawerAndNonceStruct extends ethereum.Tuple {
  get withdrawer(): Address {
    return this[0].toAddress();
  }

  get nonce(): BigInt {
    return this[1].toBigInt();
  }
}

export class SlashSharesCall extends ethereum.Call {
  get inputs(): SlashSharesCall__Inputs {
    return new SlashSharesCall__Inputs(this);
  }

  get outputs(): SlashSharesCall__Outputs {
    return new SlashSharesCall__Outputs(this);
  }
}

export class SlashSharesCall__Inputs {
  _call: SlashSharesCall;

  constructor(call: SlashSharesCall) {
    this._call = call;
  }

  get slashedAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get strategies(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }

  get strategyIndexes(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }

  get shareAmounts(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }
}

export class SlashSharesCall__Outputs {
  _call: SlashSharesCall;

  constructor(call: SlashSharesCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UndelegateCall extends ethereum.Call {
  get inputs(): UndelegateCall__Inputs {
    return new UndelegateCall__Inputs(this);
  }

  get outputs(): UndelegateCall__Outputs {
    return new UndelegateCall__Outputs(this);
  }
}

export class UndelegateCall__Inputs {
  _call: UndelegateCall;

  constructor(call: UndelegateCall) {
    this._call = call;
  }
}

export class UndelegateCall__Outputs {
  _call: UndelegateCall;

  constructor(call: UndelegateCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }

  get newPausedStatus(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}
